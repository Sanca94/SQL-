/*1. Create a report that produces the following for each employee:
<employee last name> earns <salary> monthly but wants <3 times salary.>.
Label the column Dream Salaries.*/

SELECT last_name || ' earns '
|| TO_CHAR(salary, 'fm$99,999.00')
|| ' monthly but wants '
|| TO_CHAR(salary * 3, 'fm$99,999.00')
|| '.' "Dream Salaries"
FROM employees

/*2. Display each employee’s last name, hire date, and salary review date, which is the first
Monday after six months of service. Label the column REVIEW. Format the dates to appear
in the format similar to “Monday, the Thirty-First of July, 2000.”*/

SELECT last_name, hire_date,
TO_CHAR(NEXT_DAY(ADD_MONTHS(hire_date, 6),'MONDAY'), 'fmday, "the" Ddspth "of" Month, YYYY') REVIEW
FROM employees

/*3. Display the last name, hire date, and day of the week on which the employee started. Label
the column DAY. Order the results by the day of the week, starting with Monday.*/

SELECT last_name, hire_date,
TO_CHAR(hire_date, 'DAY') DAY
FROM employees
ORDER BY TO_CHAR(hire_date - 1, 'd')

/*4. Create a query that displays the employees’ last names and commission amounts. If an
employee does not earn commission, show “No Commission.” Label the column COMM.*/

SELECT last_name,
NVL(To_CHAR(commission_pct) , 'No Commsission') COMM
FROM employees

/*5. Using the DECODE function, write a query that displays the grade of all employees based on
the value of the column JOB_ID, using the following data: study*/

SELECT job_id, decode (job_id,
'AD_PRES', 'A',
'ST_MAN', 'B',
'IT_PROG', 'C',
'SA_REP', 'D',
'ST_CLERK', 'E',
'0')GRADE
FROM employees

/*6. Rewrite the statement in the preceding exercise by using the CASE syntax.*/

SELECT job_id, CASE job_id
WHEN 'AD_PRES' THEN 'A'
WHEN 'ST_MAN' THEN 'B'
WHEN 'IT_PROG' THEN 'C'
WHEN 'SA_REP' THEN 'D'
WHEN 'ST_CLEARK' THEN 'E'
ELSE '0' END GRADE
FROM employees


