/*Student Guide Lesson 7*/ 

/* 1. Write a query for the HR department to produce the addresses of all the departments. Use
the LOCATIONS and COUNTRIES tables. Show the location ID, street address, city, state or
province, and country in the output. Use a NATURAL JOIN to produce the results. Study*/

SELECT location_id, street_address, city, state_province, country_name
FROM locations
NATURAL JOIN countries

/* 2. The HR department needs a report of only those employees with corresponding
departments. Write a query to display the last name, department number, and department
name for these employees. Study*/

SELECT last_name, department_id, department_name
FROM employees
JOIN departments
USING (department_id)

/* 3. The HR department needs a report of employees in Toronto. Display the last name, job,
department number, and the department name for all employees who work in Toronto.*/

SELECT e.last_name, e.job_id, e.department_id, d.department_name, city
FROM employees e JOIN departments d
ON (e.department_id = d.department_id)
JOIN locations l
ON (d.location_id = l.location_id)
WHERE LOWER(l.city) = 'toronto'

/* 4. Create a report to display employees’ last name and employee number along with their
manager’s last name and manager number. Label the columns Employee, Emp#,
Manager, and Mgr#, respectively. Save your SQL statement as lab_07_04.sql. Run the
query.*/

SELECT w.last_name "Employee", w.employee_id "EMP#", m.last_name "Manager", m.employee_id "Mgr#"
FROM employees w JOIN employees m
ON (w.manager_id = m.employee_id) 

/* 5. Modify lab_07_04.sql to display all employees including King, who has no manager.
Order the results by the employee number. Save your SQL statement as lab_07_05.sql.
Run the query in lab_07_05.sql.*/

SELECT w.last_name "Employee", w.employee_id "EMP#", m.last_name "Manager", m.employee_id "Mgr#"
FROM employees w
LEFT OUTER JOIN employees m
ON (w.manager_id = m.employee_id)
ORDER BY w.employee_id

/* 6. Create a report for the HR department that displays employee last names, department
numbers, and all the employees who work in the same department as a given employee.
Give each column an appropriate label. Save the script to a file named lab_07_06.sql.*/

SELECT e.department_id department, e.last_name, c.last_name SAME_DEPARTMENT
FROM employees e JOIN employees c
ON (e.department_id = c.department_id)
WHERE e.employee_id <> c.employee_id
ORDER BY e.department_id, e.last_name, c.last_name

/* 7. The HR department needs a report on job grades and salaries. To familiarize yourself with
the JOB_GRADES table, first show the structure of the JOB_GRADES table. Then create a
query that displays the name, job, department name, salary, and grade for all employees.*/

DESC job_grades

SELECT e.last_name, e.job_id, d.department_name, e.salary, j.grade
FROM employees e JOIN departments d
ON (e.department_id = d.department_id)
JOIN job_grades j
ON (e.salary BETWEEN j.lowest_sal AND j.highest_sal)

/* 8. The HR department wants to determine the names of all the employees who were hired
after Davies. Create a query to display the name and hire date of any employee hired after
employee Davies. study */

SELECT e.last_name, e.hire_date
FROM employees e JOIN employees davies
ON (davies.last_name = 'Davies')
WHERE davies.hire_date < e.hire_date

/* 9. The HR department needs to find the names and hire dates of all the employees who were
hired before their managers, along with their managers’ names and hire dates. Save the
script to a file named lab_07_09.sql. Study*/

SELECT e.last_name Employee, e.hire_date Employee_Hire_date, m.last_name Manager, m.hire_date Manager_Hire_date
FROM employees e JOIN employees m
ON (e.manager_id = m.employee_id)
WHERE e.hire_date < m.hire_date
