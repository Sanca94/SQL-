/*1. Group functions work across many rows to produce one result per group.
True/False*/ True

/*2. Group functions include nulls in calculations.
True/False*/ False

/*3. The WHERE clause restricts rows before inclusion in a group calculation.
True/False*/ True

/*The HR department needs the following reports:
4. Find the highest, lowest, sum, and average salary of all employees. Label the columns
Maximum, Minimum, Sum, and Average, respectively. Round your results to the nearest
whole number. Save your SQL statement as lab_06_04.sql. Run the query.*/

SELECT ROUND(MAX(salary),0) "Maximum",
ROUND(MIN(salary),0) "Minimum",
ROUND(SUM(salary), 0) "Sum",
ROUND(AVG(salary), 0)"Average"
FROM employees

/*5. Modify the query in lab_06_04.sql to display the minimum, maximum, sum, and average
salary for each job type. Save lab_06_04.sql as lab_06_05.sql again. Run the
statement in lab_06_05.sql. Study*/

SELECT job_id, ROUND(MAX(salary),0)"Maximum",
ROUND(MIN(salary),0) "Minimum",
ROUND(SUM(salary),0) "Sum",
ROUND(AVG(salary), 0)"Average"
FROM employees
GROUP BY job_id
 
/*6. Write a query to display the number of people with the same job.
Generalize the query so that the user in the HR department is prompted for a job title. Save
the script to a file named lab_06_06.sql. Run the query. Enter IT_PROG when
prompted.*/

SELECT job_id, COUNT(*)
FROM employees
GROUP BY job_id

     /*Generalize the query*/
SELECT job_id, COUNT(*)
FROM employees
WHERE job_id = '&job_title'
GROUP BY job_id

/*7. Determine the number of managers without listing them. Label the column Number of
Managers.*/

SELECT COUNT(DISTINCT manager_id)"Number of Managers"
FROM employees

/*Hint: Use the MANAGER_ID column to determine the number of managers.
8. Find the difference between the highest and lowest salaries. Label the column
DIFFERENCE.*/

SELECT MAX(salary)-MIN(salary)DIFFERENCE
FROM employees

/*If you have time, complete the following exercises:
9. Create a report to display the manager number and the salary of the lowest-paid employee
for that manager. Exclude anyone whose manager is not known. Exclude any groups where
the minimum salary is $6,000 or less. Sort the output in descending order of salary.
If you want an extra challenge, complete the following exercises:*/

SELECT manager_id, Min(salary)
FROM employees
WHERE manager_id IS NOT NULL
GROUP BY manager_id
HAVING MIN(salary)>6000
ORDER BY MIN(salary) DESC
 
/*10. Create a query to display the total number of employees and, of that total, the number of
employees hired in 1995, 1996, 1997, and 1998. Create appropriate column headings.*/

SELECT COUNT(*) total,
SUM(DECODE(TO_CHAR(hire_date,'YYYY'),1995,1,0))"1995",
SUM(DECODE(TO_CHAR(hire_date,'YYYY'),1995,1,0))"1996",
SUM(DECODE(TO_CHAR(hire_date,'YYYY'),1995,1,0))"1997",
SUM(DECODE(TO_CHAR(hire_date,'YYYY'),1995,1,0))"1998"
FROM employees

/*11. Create a matrix query to display the job, the salary for that job based on department
number, and the total salary for that job, for departments 20, 50, 80, and 90, giving each
column an appropriate heading. */

SELECT job_id "Job",
SUM(DECODE(department_id, 20, salary)) "Dept 20",
SUM(DECODE(department_id, 50, salary)) "Dept 50",
SUM(DECODE(department_id, 80, salary)) "Dept 80",
SUM(DECODE(department_id, 90, salary)) "Dept 90",
SUM(salary) "Total"
FROM employees
GROUP BY job_id





